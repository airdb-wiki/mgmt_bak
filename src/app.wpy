<style lang="less">
@import 'style/weui.less';
page{
  background-color: #F8F8F8;
  font-size: 16px;
}
.page__hd {
  padding: 40px;
}
.page__bd {
  padding-bottom: 40px;
}
.page__bd_spacing {
  padding-left: 15px;
  padding-right: 15px;
}
.page__ft{
  padding-bottom: 10px;
  text-align: center;
}
.page__title {
  text-align: left;
  font-size: 20px;
  font-weight: 400;
}
.page__desc {
  margin-top: 5px;
  color: #888888;
  text-align: left;
  font-size: 14px;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import api from '@/utils/api'

export default class extends wepy.app {
  config = {
    pages: [
      'pages/topics/index',
      'pages/test/index',
      'pages/hr/index',
      'pages/users/post',
      'pages/users/me',
      'pages/auth/register',
      'pages/auth/login',
      'pages/topics/show',
      'pages/topics/userIndex',
      'pages/users/edit',
      'pages/users/show',
      'pages/users/history',
      'pages/replies/index',
      'pages/replies/userIndex',
      'pages/grid/index',
      'pages/users/privilege',
      'pages/customerservice/index',
      'pages/grid/volunteer',
      'pages/grid/reliefstation',
      'pages/replies/create',
      'pages/notifications/index'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '宝贝回家',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      list: [{
        pagePath: 'pages/topics/index',
        text: '首页',
        iconPath: '/static/tabs/home.png',
        selectedIconPath: '/static/tabs/home_active.png'
      }, {
        pagePath: 'pages/users/me',
        text: '我的',
        iconPath: '/static/tabs/user_active.png',
        selectedIconPath: '/static/tabs/user_active.png'
      }],
      color: '#707070',
      selectedColor: '#00b5ad'
    }
  }

  // 获取当前登录用户信息
  async getCurrentUser () {
    if (!this.checkLogin()) {
      return null
    }

    // 从缓存中获取用户信息
    let user = wepy.getStorageSync('user')

    try {
      // 登录了但是缓存中没有，请求接口获取
      if (!user) {
        let userResponse = await api.authRequest('user')
        if (userResponse.statusCode === 200) {
          user = userResponse.data
          wepy.setStorageSync('user', user)
        }
      }
    } catch (err) {
      console.log(err)
      wepy.showModal({
        title: '提示',
        content: '服务器错误，请联系管理员'
      })
    }

    return user
  }

  // 用户是否已经登录
  checkLogin () {
    return (wepy.getStorageSync('access_token') !== '')
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  globalData = {
    refreshPages: [],
    unreadCount: 0
  }
  checkRefreshPages (route, callback) {
    let refreshIndex = this.globalData.refreshPages.indexOf(route)
    if (refreshIndex === -1) {
      return
    }

    this.globalData.refreshPages.splice(refreshIndex, 1)
    callback && callback()
  }

  onLaunch(launch) {
    // 小程序启动，调用一起获取未读消息数
    this.updateUnreadCount()
    // 每隔 60 秒，调用一起获取未读消息数
    setInterval(() => {
      this.updateUnreadCount()
    }, 60000)

    // console.log('app created, NODE_ENV:', process.env.NODE_ENV, process.env)
    launch.shareTicket = 'https://weapp.liyu.wiki/api/topics?page=1&include=user%2Ccategory'

    this.getScene(launch)

    // // <!--广告开始-->
    // // 在页面中定义插屏广告
    // let interstitialAd = null
    //
    // // 在页面onLoad回调事件中创建插屏广告实例
    // if (wx.createInterstitialAd) {
    //   interstitialAd = wx.createInterstitialAd({
    //     adUnitId: 'adunit-1a35266b79a02a85'
    //   })
    // }
    //
    // // 在适合的场景显示插屏广告
    // if (interstitialAd) {
    //   interstitialAd.show().catch((err) => {
    //     console.error(err)
    //   })
    // }

    // 获取用户权限
    this.getPerms()
  }
  async getScene(launch) {
    let loginData = await wepy.login()
    launch.code = loginData.code
    let response = await api.request({
      url: 'weapp/authorizations',
      method: 'POST',
      data: launch
    })
    console.log('get openid=====', response.data)

    wepy.setStorageSync('user', response.data)
    wepy.setStorageSync('profile', response.data)
  }
  // 获取权限
  async getPerms() {
    let perms = []
    if (!this.checkLogin()) {
      return perms
    }
    // 缓存中没有则请求接口获取
    try {
      let permsResponse = await api.authRequest('user/permissions', false)
      // 请求成功，放入 storage 缓存中
      if (permsResponse.statusCode === 200) {
        perms = permsResponse.data.data
        wepy.setStorageSync('perms', perms)
      }
    } catch (err) {
      console.log(err)
      wepy.showModal({
        title: '提示',
        content: '获取用户权限失败，可尝试重启小程序'
      })
    }
    return perms
  }
  // 获取未读消息数
  async updateUnreadCount() {
    // 未登录不需要请求
    if (!this.checkLogin()) {
      return
    }

    // 请求消息统计接口
    let notificationResponse = await api.authRequest('user/notifications/stats', false)

    //  请求成功，赋值全局变量 unreadCount
    if (notificationResponse.statusCode === 200) {
      this.globalData.unreadCount = notificationResponse.data.unread_count
    }
  }
  // 判断用户权限
  can(targetPerm) {
    if (!this.checkLogin()) {
      return false
    }

    // 获取缓存中的权限
    let perms = wepy.getStorageSync('perms') || []

    // 判断权限中是否有目标权限
    if (perms.find(perm => perm.name === targetPerm)) {
      return true
    }

    return false
  }
}
</script>
